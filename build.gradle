plugins {
    id 'java'
    id 'jacoco'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // JUnit Jupiter (единая и актуальная версия)
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2' // Проверьте на Maven Central последнюю стабильную версию
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Opentest4j (часто поставляется с JUnit Jupiter, но если нужна конкретная версия)
    testImplementation group: 'org.opentest4j', name: 'opentest4j', version: '1.3.0'

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    testImplementation 'org.projectlombok:lombok:1.18.38'

    // Lombok (правильная конфигурация)
    testCompileOnly 'org.projectlombok:lombok:1.18.38' // Проверьте на Maven Central последнюю стабильную версию
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    finalizedBy jacocoTestReport // report is always generated after tests run

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    doLast {
        def reportFile = jacocoTestReport.reports.xml.outputLocation.asFile.get()
        printCoverage(reportFile)
    }
}

def printCoverage(File xml) {
    if (!xml.exists()) return

    def parser = new XmlParser()
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    def results = parser.parse(xml)

    def percentage = {
        def covered = it.'@covered' as Double
        def missed = it.'@missed' as Double
        ((covered / (covered + missed)) * 100).round(2)
    }

    def counters = results.counter
    def metrics = [
            'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
            'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
            'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
            'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
            'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
            'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
    ]

    logger.quiet("----- Code Coverage ----------")
    metrics.each { key, value -> logger.quiet(sprintf(" - %-11s: %6.2f%%", key, value)) }
    logger.quiet("------------------------------")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.99
            }
        }
    }
}

test.finalizedBy jacocoTestCoverageVerification